# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ "main" ]

jobs:
  test-host:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
        - 32574:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Verify MySQL connection from host
      run: |
        sudo apt-get install -y mysql-client
        mysql --host 127.0.0.1 --port 32574 -uroot -ppassword -e "SHOW DATABASES"

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
          distribution: 'adopt'
          java-version: '17'
          
    - name: Init gradle
      run: | 
          cd Image-Classification 
          ./gradlew init
          
    - name: Execute Gradle build
      env:
          IMAGGA_API_KEY: ${{ secrets.IMAGGA_API_KEY }}
          IMAGGA_API_SECRET: ${{ secrets.IMAGGA_API_SECRET }}
      run: |
          cd Image-Classification
          ./gradlew build -x test
    
    - name: Start Spring application
      run: |
          cd Image-Classification 
          java -jar build/libs/Image-Classification-0.0.1-SNAPSHOT.jar &
          sleep 10
          
    - name: Stop Spring application
      run: |
          pkill -f 'Image-Classification-0.0.1-SNAPSHOT.jar'
