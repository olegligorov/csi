# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: UI Tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ "main" ]
    
jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Set up MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
          host port: 3306
          container port: 3307
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql version: '8.0'
          mysql database: 'image_classification'
          mysql root password: 'root'
          mysql user: 'root'
          mysql password: 'root'

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
          distribution: 'adopt'
          java-version: '17'
          
    - name: Init gradle
      run: | 
          cd Image-Classification 
          ./gradlew init
          
    - name: Execute Gradle build
      env:
          IMAGGA_API_KEY: ${{ secrets.IMAGGA_API_KEY }}
          IMAGGA_API_SECRET: ${{ secrets.IMAGGA_API_SECRET }}
      run: |
          cd Image-Classification
          ./gradlew build -x test
    
    - name: Start Spring application
      run: |
          cd Image-Classification 
          java -jar build/libs/Image-Classification-0.0.1-SNAPSHOT.jar &
          sleep 10
             
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
          node-version: 18
        
    - name: Clear npm cache
      run: |
        cd Image-Classification-FrontEnd
        npm cache clean --force
     
     
    - name: Delete node_modules and package-lock.json
      run: |
        cd Image-Classification-FrontEnd
        rm -rf node_modules
        rm -f package-lock.json
          
    - name: Install dependencies
      run: |
        cd Image-Classification-FrontEnd
        npm install @clr/ui@15.1.0 @clr/angular@15.1.0 @cds/core@6.3.1 @cds/angular@6.3.1 @cds/city@1.1.0--legacy-peer-deps
        
    - name: Build Angular project
      run: |
        cd Image-Classification-FrontEnd
        npm run build

    - name: Serve Angular project
      run: |
        cd cd Image-Classification-FrontEnd
        npm run start &
          
    - name: Stop Spring application
      run: |
          pkill -f 'Image-Classification-0.0.1-SNAPSHOT.jar'
